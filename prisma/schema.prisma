generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Decision {
  uuid                                    String @id @default(uuid())
  stepInputUuid                           String
  stepOutputUuid                          String
  title                                   String
  decisionsDecisionsStepInputUuidToSteps  Step   @relation("steps_decisions_step_input_uuidTosteps", fields: [stepInputUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_step_input")
  decisionsDecisionsStepOutputUuidToSteps Step   @relation("decisionsDecisionsStepOutputUuidToSteps", fields: [stepOutputUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_step_output")
}

model Step {
  uuid                                    String          @id @default(uuid())
  storyUuid                               String
  waypointUuid                            String?
  assetId                                 String?
  description                             String
  media                                   Media?
  title                                   String
  ending                                  Ending?
  decisionsDecisionsStepInputUuidToSteps  Decision[]      @relation("steps_decisions_step_input_uuidTosteps")
  decisionsDecisionsStepOutputUuidToSteps Decision[]      @relation("decisionsDecisionsStepOutputUuidToSteps")
  story                                   Story           @relation(fields: [storyUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_story")
  waypoint                                Waypoint?       @relation(fields: [waypointUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_waypoint")
  userStorySteps                          UserStoryStep[]
}

model Story {
  uuid        String      @id @default(uuid())
  active      Boolean     @default(false)
  assetId     String?
  description String
  title       String
  steps       Step[]
  userStories UserStory[]
}

model UserStory {
  uuid           String          @id @default(uuid())
  storyUuid      String
  userUuid       String
  createdAt      DateTime        @default(now())
  deletedAt      DateTime?
  finishedAt     DateTime?
  story          Story           @relation(fields: [storyUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_story")
  user           User            @relation(fields: [userUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  userStorySteps UserStoryStep[]
}

model UserStoryStep {
  userStoryUuid String
  stepUuid      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  finishedAt    DateTime?
  latitude      Float
  longitude     Float
  step          Step      @relation(fields: [stepUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_step")
  userStory     UserStory @relation(fields: [userStoryUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_story")

  @@id([userStoryUuid, stepUuid])
}

model User {
  uuid        String      @id @default(uuid())
  email       String?
  userStories UserStory[]
}

model Waypoint {
  uuid      String  @id @default(uuid())
  placeType String?
  steps     Step[]
}

enum Ending {
  SUCCESS
  FAILURE
}

enum Media {
  AUDIO
  IMAGE
  VIDEO
}
